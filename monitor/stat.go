package monitor

import (
	"fmt"
	"sync"
	"time"
)

type LatencyStats struct {
	// 增加begin，end信息，便于计算压测速率信息
	// begin： 压测开始时间
	// end：压测结束时间
	begin, end time.Time

	// 统计成功次数，失败次数
	succ, fail int

	// 总压测次数
	num int

	mark time.Time

	// 总时延，最小时延，最大时延
	dur, min, max time.Duration

	// 互斥锁，保证互操作时 goroutine 并发安全
	mu *sync.Mutex

	// 附加信息，便于最后统计汇总
	ext string
}

func New(ext string) *LatencyStats {
	s := &LatencyStats{
		ext: ext,
		mu:  &sync.Mutex{},
	}
	return s
}

func (s *LatencyStats) Start() {
	s.mark = time.Now()
	if s.begin.IsZero() {
		s.begin = s.mark
	}
}

func (s LatencyStats) String() string {
	return fmt.Sprintf("begin: %v, end: %v, succ: %v, fail :%v, max-latency: %v, min-latency: %v",
		s.begin.UnixNano(), s.end.UnixNano(), s.succ, s.fail, s.max, s.fail)
}

func (s *LatencyStats) record(n int) {

	if s.mark.IsZero() {
		panic("not started")
	}

	now := time.Now()
	s.end = now
	dur := now.Sub(s.mark)
	dur1 := dur / time.Duration(n)
	if dur1 < s.min || s.min == 0 {
		s.min = dur1
	}
	if dur1 > s.max {
		s.max = dur1
	}
	s.dur += dur
	s.num += n
	s.mark = time.Time{}
}

func (s *LatencyStats) RecordSucc(n int) {
	s.record(n)
	s.succ += n
}

func (s *LatencyStats) RecordFail(n int) {
	s.record(n)
	s.fail += n
}

func (s *LatencyStats) RatePerSec() int {
	durSec := s.dur / time.Second
	if durSec > 0 {
		return s.num / int(durSec)
	}
	return s.num
}

func (s *LatencyStats) Avg() time.Duration {
	if s.num > 0 {
		return s.dur / time.Duration(s.num)
	}
	return 0
}

func (s *LatencyStats) TPS() int {
	lat := s.end.Sub(s.begin)
	return int(float64(s.succ) / float64(lat) * float64(time.Second))
}

func (s *LatencyStats) Add(x *LatencyStats) {
	s.mu.Lock()
	defer func() {
		s.mu.Unlock()
	}()

	if s.ext == "" {
		s.ext = x.ext
	}
	if s.begin.UnixNano() > x.begin.UnixNano() {
		s.begin = x.begin
	}
	if s.end.IsZero() || s.end.UnixNano() < x.end.UnixNano() {
		s.end = x.end
	}

	if x.min < s.min || s.min == 0 {
		s.min = x.min
	}
	if x.max > s.max {
		s.max = x.max
	}
	s.dur += x.dur
	s.num += x.num

	s.succ += x.succ
	s.fail += x.fail
}

// Merge merge multiple LatencyStats(chan *LatencyStats) generated by goroutines and return one LatencyStats
func Merge(s chan *LatencyStats) *LatencyStats {

	x := New("")
	x.Start()

	for i := range s {
		x.Add(i)
	}

	return x
}
